// Generated by CoffeeScript 1.4.0
(function() {
  var ElementChain,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = ElementChain = (function(_super) {

    __extends(ElementChain, _super);

    /*
    */


    function ElementChain(nodeName, parent) {
      this.parent = parent;
      this._chain = nodeName;
      this._index = [];
    }

    /*
    */


    ElementChain.prototype.toString = function() {
      var chain;
      console.log("G");
      chain = this.parent.toString();
      chain += this._chain + ("[" + (this._index.join(' ')) + "]");
      return chain;
    };

    /*
    */


    ElementChain.prototype.contains = function(name, value) {
      this._index.push("contains(" + name + ", '" + value + "')");
      return this;
    };

    /*
    */


    ElementChain.prototype.eq = function(name, value) {
      return this.op(name, "=", value);
    };

    /*
    */


    ElementChain.prototype.neq = function(name, value) {
      return this.op(name, "!=", value);
    };

    /*
    */


    ElementChain.prototype.gt = function(name, value) {
      return this.op(name, ">", value);
    };

    /*
    */


    ElementChain.prototype.lt = function(name, value) {
      return this.op(name, "<", value);
    };

    /*
    */


    ElementChain.prototype.gte = function(name, value) {
      return this.op(name, ">=", value);
    };

    /*
    */


    ElementChain.prototype.lte = function(name, value) {
      return this.op(name, "<=", value);
    };

    /*
    */


    ElementChain.prototype.op = function(name, op, value) {
      this._index.push("" + name + op + "'" + value + "'");
      return this;
    };

    /*
    */


    ElementChain.prototype.or = function() {
      this._index.push("or");
      return this;
    };

    /*
    */


    ElementChain.prototype.and = function() {
      this._index.push("and");
      return this;
    };

    /*
    */


    ElementChain.prototype.index = function(value) {
      this._index = [value];
      return this;
    };

    /*
    */


    ElementChain.prototype._newChain = function(nodeName, parent) {
      return new ElementChain(nodeName, this);
    };

    return ElementChain;

  })(require("./base"));

}).call(this);
